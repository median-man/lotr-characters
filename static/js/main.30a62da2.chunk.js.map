{"version":3,"sources":["App.js","lotr_api.js","serviceWorker.js","index.js"],"names":["App","useState","characters","setCharacters","isLoading","setIsLoading","error","setError","useEffect","headers","Headers","append","fetch","method","then","response","ok","json","status","fetchAllCharacters","result","docs","catch","length","map","c","key","_id","name","race","href","wikiUrl","rel","target","gender","birth","death","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"4MAiEeA,MA9Df,WAAgB,IAAD,EACuBC,mBAAS,IADhC,mBACNC,EADM,KACMC,EADN,OAEqBF,oBAAS,GAF9B,mBAENG,EAFM,KAEKC,EAFL,OAGaJ,mBAAS,IAHtB,mBAGNK,EAHM,KAGCC,EAHD,KAKbC,qBAAU,WACRH,GAAa,GCTiB,WAChC,IAAMI,EAAU,IAAIC,QAEpB,OADAD,EAAQE,OAAO,gBAAiB,+BACzBC,MAAM,iDAAkD,CAC7DC,OAAQ,MACRJ,YACCK,MAAK,SAACC,GACP,OAAIA,EAASC,GACJD,EAASE,OAEX,CAAEX,MAAOS,EAASG,WDAzBC,GACGL,MAAK,SAACM,GACLjB,EAAciB,EAAOC,MACrBd,EAAS,IACTF,GAAa,MAEdiB,OAAM,SAAChB,GACNC,EAASD,GACTD,GAAa,QAEhB,IAEH,IAcIa,EAAS,GAQb,OANEA,EADEZ,EAAMiB,OAAS,EACRjB,EACAF,EACA,aAEH,UAAMF,EAAWqB,OAAjB,qBAGN,6BACE,kDACA,2BAAG,2CAAH,IAA6BL,GAC7B,+BACE,+BACE,4BACE,oCACA,oCACA,oCACA,sCACA,qCACA,uCAGJ,+BAAQhB,EAAWsB,KArCE,SAACC,GAAD,OACzB,wBAAIC,IAAKD,EAAEE,KACT,4BAAKF,EAAEG,MACP,4BAAKH,EAAEI,MACP,4BACE,uBAAGC,KAAML,EAAEM,QAASC,IAAI,sBAAsBC,OAAO,UAArD,SAIF,4BAAKR,EAAES,QACP,4BAAKT,EAAEU,OACP,4BAAKV,EAAEW,eErBOC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlC,MAAK,SAAAmC,GACJA,EAAaC,gBAEd5B,OAAM,SAAAhB,GACL6C,QAAQ7C,MAAMA,EAAM8C,c","file":"static/js/main.30a62da2.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { fetchAllCharacters } from \"./lotr_api\";\n\nfunction App() {\n  const [characters, setCharacters] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n\n  useEffect(() => {\n    setIsLoading(true);\n    fetchAllCharacters()\n      .then((result) => {\n        setCharacters(result.docs);\n        setError(\"\");\n        setIsLoading(false);\n      })\n      .catch((error) => {\n        setError(error);\n        setIsLoading(false);\n      });\n  }, []);\n\n  const renderCharacterRow = (c) => (\n    <tr key={c._id}>\n      <td>{c.name}</td>\n      <td>{c.race}</td>\n      <td>\n        <a href={c.wikiUrl} rel=\"noopener noreferrer\" target=\"_blank\">\n          wiki\n        </a>\n      </td>\n      <td>{c.gender}</td>\n      <td>{c.birth}</td>\n      <td>{c.death}</td>\n    </tr>\n  );\n  let status = \"\";\n  if (error.length > 0) {\n    status = error;\n  } else if (isLoading) {\n    status = \"Loading...\";\n  } else {\n    status = `${characters.length} characters found`;\n  }\n  return (\n    <div>\n      <h1>LOTR Characters DB</h1>\n      <p><strong>Status:</strong> {status}</p>\n      <table>\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>Race</th>\n            <th>Wiki</th>\n            <th>Gender</th>\n            <th>Birth</th>\n            <th>Death</th>\n          </tr>\n        </thead>\n        <tbody>{characters.map(renderCharacterRow)}</tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default App;\n","export const fetchAllCharacters = () => {\r\n  const headers = new Headers();\r\n  headers.append(\"Authorization\", \"Bearer Xz2OBp6RE9w48eje3Vdd\");\r\n  return fetch(\"https://the-one-api.herokuapp.com/v1/character\", {\r\n    method: \"GET\",\r\n    headers,\r\n  }).then((response) => {\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    return { error: response.status };\r\n  });\r\n};\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}